pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,1,0)#
        }else{#
          leg.text <- FALSE#
          # sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-1,-1,1,0)#
        }#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp,#
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,-1,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-1,-1,-1,0)#
        }#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp,#
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,-1,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-1,-1,-1,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", text = tx,#
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, text = tx,#
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,-1,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-1,-1,-1,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", text = txt,#
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, text = txt,#
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
u
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
warnings()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,-1,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-1,-1,-1,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
warnings()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,-1,-1,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-1,-1,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
?barplot
?barplot
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,1,0,0,0,0,1,0,0,0,0,1,-1,-1,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-1,-1,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,-2)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,-2)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.1*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
my_col <- brewer.pal(7,"Greys")[c(1,3,5,6,7)]
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
my_col
my_col <- brewer.pal(7,"Greys")[1:5]
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
my_col <- brewer.pal(7,"Greys")[c(1,3,4,5,7)]
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
my_col <- brewer.pal(7,"Greys")[c(1,3,4,5,6)]
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
my_col <- brewer.pal(9,"Greys")[c(1,2,3,4,6)]
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
my_col <- brewer.pal(9,"Greys")[c(1,2,3,4,5)]
make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
?par
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))
par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))
make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()#
    #---------------------------------#
    # bar plots#
    #---------------------------------#
#
    make_side_by_side_bar_plots <- function(glm_rslt, randomforest_rslt,#
                                            est, est_labels, rm_last = TRUE,#
                                            yaxis_label, add_ratio = FALSE, #
                                            relative_est = NULL, relative_K = NULL, #
                                            xaxis_label = "Number CV Folds",#
                                            absolute_val = TRUE, col, ...){#
      layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
      par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
          oma = c(2.1, 5.1, 2.1, 2.1))#
      for(n in c(50, 100, 250, 500)){#
          par(las = 1)#
        tmp <- glm_rslt[glm_rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
        }else{#
          leg.text <- FALSE#
        }#
        tmp <- barplot(grbg, legend.text = FALSE,#
          beside=TRUE, log = "y", yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, ... )#
          mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
        at = c(tmp[,1],tmp[,2],tmp[,3]))#
                  mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(n == 50){#
          legend(x = "topright", fill = unique(col), legend = leg.text)#
        }#
        if(n == 50){#
          par(las = 0)#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        mtext(outer = FALSE, side = 3, line = 0.5, paste0("n = ", n))#
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
      for(n in c(50, 100, 250, 500)){#
        par(las = 1)#
        tmp <- randomforest_rslt[randomforest_rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
            row.names(grbg) <- c(5,10,20,40)#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        tmp <- barplot(grbg,  beside=TRUE, log = "y", yaxt = "n", names.arg = rep("",dim(grbg)[2]), #
                       col = col, ...)#
        mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        # mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
        #       at = c(mean(tmp[2:3,1]),mean(tmp[2:3,2]),mean(tmp[2:3,3])))#
        par(las = 0)#
        if(n == 50){#
          axis(side = 2)#
          mtext(outer = FALSE, side = 2, line = 2, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4, "Random Forest", cex = 1)#
        }else{#
          axis(side = 2, labels = FALSE)#
        }#
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.15*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.8,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        # xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.15*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          par(las = 0)#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.00001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()
setwd("~/Dropbox/R/cvtmleauc/sandbox/simulation/")#
  sim <- "cvtn"#
  load(paste0("allOut_",sim,".RData"))#
    # load("~/cvtmleauc/out/allOut_new.RData")#
#
    get_sim_rslt <- function(out, parm, wrapper, truth = "truth",#
                             estimators = c("dcvtmle1","donestep1",#
                                     "cvtmle1","onestep1","emp1",#
                                     "dcvtmle5","donestep5",#
                                     "cvtmle5","onestep5","emp5",#
                                     "dcvtmle10","donestep10",#
                                     "cvtmle10","onestep10","emp10",#
                                     "dcvtmle20","donestep20",#
                                     "cvtmle20","onestep20","emp20",#
                                     "bootstrap"#
                                     ), ...){#
      b <- bp <- v <- m <- cv <- co <- mad <- NULL#
      for(i in seq_len(length(parm[,1]))){#
        x <- out[out$n == parm$n[i] & out$K == parm$K[i] & out$wrapper == wrapper,]#
        b <- rbind(b, colMeans(x[,paste0("est_",estimators)] - x[,truth], na.rm = TRUE))#
        bp <- rbind(bp, colMeans((x[,paste0("est_",estimators)] - x[,truth])/x[,truth], na.rm = TRUE))#
        v <- rbind(v, apply(x[,paste0("est_",estimators)], 2, var, na.rm = TRUE))#
        cv <- rbind(cv, apply(x[,paste0("est_",estimators)], 2, function(y){#
          sd(y, na.rm = TRUE) / mean(y, na.rm = TRUE)#
        }))#
        m <- rbind(m, colMeans((x[,paste0("est_",estimators)] - as.numeric(x[,truth]))^2, na.rm = TRUE))#
        mad <- rbind(mad, apply(x[,paste0("est_",estimators)], 2, function(y){ #
          median(y - as.numeric(x[,truth]), na.rm = TRUE)#
        }))#
        # coverage#
        # coverage <- rep(NA, length(estimators))#
        # ct <- 0#
        # for(est in estimators){#
        #   ct <- ct + 1#
        #   coverage[ct] <- mean(x[,paste0("est_",est)] - 1.96 * x[,paste0("se_",est)] < x[,truth] & #
        #                   x[,paste0("est_",est)] + 1.96 * x[,paste0("se_",est)] > x[,truth], na.rm = TRUE)#
        # }#
        # co <- rbind(co, coverage)#
      }#
      parm <- cbind(parm, b, v, m, mad, cv, bp) #, #
                    # co)#
      colnames(parm) <- c("n", "K", paste0("bias_", estimators),#
                          paste0("var_", estimators),#
                          paste0("mse_", estimators),#
                          paste0("mad_", estimators),#
                          paste0("cv_", estimators),#
                          paste0("bp_", estimators)#
                          ) #,#
                          # paste0("cov_", estimators))#
      return(parm)#
    }#
    parm <- expand.grid(n = c(50, 100, 250, 500),#
                        K = c(5, 10, 20, 40))#
    glm_rslt <- get_sim_rslt(out, parm, wrapper = "glm_wrapper")#
    randomforest_rslt <- get_sim_rslt(out, parm, wrapper = "randomforest_wrapper")#
    #---------------------------------#
    # bar plots#
    #---------------------------------#
#
    make_side_by_side_bar_plots <- function(glm_rslt, randomforest_rslt,#
                                            est, est_labels, rm_last = TRUE,#
                                            yaxis_label, add_ratio = TRUE, #
                                            xaxis_label = "Number CV Folds",#
                                            transpose = FALSE, #
                                            log = "y",#
                                            relative_est = NULL,#
                                            relative_K = NULL, #
                                            absolute_val = TRUE, col, ...){#
      layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
      par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
          oma = c(2.1, 5.1, 2.1, 2.1))#
      for(n in c(50, 100, 250, 500)){#
        par(las = 1)#
        tmp <- glm_rslt[glm_rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0)#
        }#
        if(transpose){#
          grbg <- t(grbg)#
        }#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        tmp <- barplot(grbg, legend.text = FALSE, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",4), col = col, #
          space = sp, ... )#
#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
        at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(n == 50){#
          legend(x = "topright", fill = unique(col), legend = leg.text, ncol = 2)#
        }#
        if(n == 50){#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4.5, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
#
        if(add_ratio){#
        }#
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
      for(n in c(50, 100, 250, 500)){#
        par(las = 1)#
        tmp <- randomforest_rslt[randomforest_rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
        if(transpose){#
          grbg <- t(grbg)#
        }#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50){#
          txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0)#
        }else{#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0)#
        }#
        tmp <- barplot(grbg,  beside=TRUE, log = log, yaxt = "n", names.arg = rep("",4), #
                       col = col, space = sp, ...)#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))        #
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        # mtext(side = 1, outer = FALSE, line = 0.02, text = c(5,10,20,40), cex =0.5, #
        #       at = c(mean(tmp[2:3,1]),mean(tmp[2:3,2]),mean(tmp[2:3,3])))#
        if(n == 50){#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          mtext(outer = FALSE, side = 2, line = 4.5, "Random Forest", cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    make_one_box_plot_row <- function(rslt, metric = "bias", #
                                      est, add_legend = FALSE, #
                                      est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                      rm_last = TRUE,#
                                      grid = FALSE, #
                                      add_text = FALSE, #
                                      nx_grid = NULL, ny_grid = BULL, #
                                      pred_algo = "Logistic regression",#
                                            yaxis_label, add_ratio = TRUE, #
                                            xaxis_label = "Number CV Folds",#
                                            transpose = FALSE, #
                                            log = "y", print_n = FALSE,#
                                            relative_est = NULL,#
                                            relative_K = NULL, #
                                            absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
        par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0)#
        }#
        xl <- c(0, 14 + sum(sp))#
        if(transpose){#
          grbg <- t(grbg)#
        }#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        tmp <- barplot(grbg, legend.text = FALSE, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",4), col = col, #
          space = sp, xlim = xl, ... )#
#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",4), col = col, #
          space = sp, xlim = xl, ... )#
        }#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
        at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(n == 50 & add_legend){#
          legend(x = "topright", fill = unique(col), legend = leg.text, ncol = 2)#
        }#
        if(n == 50){#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4.5, pred_algo, cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }#
        if(add_ratio){#
        }#
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvtn.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row(rslt = glm_rslt, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE,#
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:4,4))])#
    make_one_box_plot_row(rslt = glm_rslt, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:4,4))])#
    make_one_box_plot_row(rslt = glm_rslt, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,    add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                    ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:4,4))])#
    dev.off()#
#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvtn.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row(rslt = randomforest_rslt, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE,#
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:4,4))])#
    make_one_box_plot_row(rslt = randomforest_rslt, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                    ylim = c(0.000001,10), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:4,4))])#
    make_one_box_plot_row(rslt = randomforest_rslt, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                    ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:4,4))])#
    dev.off()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        xl <- c(0, 15 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, xlim = xl, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, xlim = xl, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.15*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          par(las = 0)#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.00001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        xl <- c(0, 16 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, xlim = xl, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, xlim = xl, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.15*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          par(las = 0)#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.00001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,-2,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        xl <- c(0, 17 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, xlim = xl, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, xlim = xl, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 1.15*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = "topleft", fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          par(las = 0)#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/glm_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.000001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
      dev.off()#
    pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/rf_cvauc.pdf",#
        height = 6, width = 11)#
    layout(matrix(1:12, nrow = 3, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 5.1, 2.1, 2.1))#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, print_n = TRUE, #
                          est = c("bias_emp1","bias_dcvtmle1",#
                                        "bias_donestep1","bias_bootstrap","bias_lpo"),#
                          grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                          add_legend = TRUE, #
                                est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                ylim = c(0.000001,10), yaxis_label = "Absolute Bias",#
                                col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                              est = c("var_emp1","var_dcvtmle1",#
                                            "var_donestep1","var_bootstrap","var_lpo"),#
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.00001,1), yaxis_label = "Variance",#
                                    col = my_col[sort(rep(1:5,4))])#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_bootstrap", "mse_lpo"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","BOOT","LPO"),#
                                    ylim = c(0.5,1.5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:5,4))])#
    dev.off()
data_sets <- c("adult", "bank", "cardio", "default",#
               "drugs", "magic", "wine")#
bigB <- 100#
ns <- c(50, 100, 250, 500)#
K <- c(5, 10, 20, 40)#
wrappers <- c("randomforest_wrapper", "glmnet_wrapper")#
#
parm <- expand.grid(data_set = data_sets,#
                    seed = 1:bigB,#
                    K = K, #
                    n = ns,#
                    wrapper = wrappers, #
                    stringsAsFactors = FALSE)
?ltmle
library(ltmle)
install.packages("ltmle")
library(ltmle)
?ltmle
one_trial <- function(n = 240, c_prob = 0.05, #
                      trt_eff1 = 0.2, #
                      trt_eff2 = 0.2, #
                      w_eff = 0.1, #
                      y1_eff = 0.2, #
                      l1_eff = 0,l2_eff = 0, #
                      set_trt = NULL, return_short = FALSE, ...){#
#
    # --------------------------------------------------#
    # baseline covariate#
    # --------------------------------------------------#
    W <- rbinom(n, 1, 0.25)#
#
    # -------------------------------------------#
    # baseline treatment assignment -- pool over P3 #
    # P3+ intervention so 2/3 prob of trt#
    # -------------------------------------------#
    if(is.null(set_trt)){#
        A <- rbinom(n, 1, 0.66)#
    }else{#
        A <- rep(set_trt, n) #
    }#
#
    # ---------------------------------------------#
    # app engagement between 0 and 3 months#
    # for simplicity, make binary#
    # ---------------------------------------------#
    L1 <- rbinom(n, 1, 0.75)#
#
    # ---------------------------------------------#
    # censoring#
    # ---------------------------------------------#
    C1 <- rbinom(n, 1, c_prob)#
#
    # ---------------------------------------------#
    # prep uptake at month 3#
    # ---------------------------------------------#
    Q1 <- plogis(-2 + trt_eff1 * A + w_eff*W + l1_eff*L1)#
    Y1 <- rbinom(n, 1, Q1)#
#
    # ---------------------------------------------#
    # app engagement between 0 and 3 months#
    # for simplicity, make binary#
    # ---------------------------------------------#
    L2 <- rbinom(n, 1, 0.75)#
#
    # ---------------------------------------------#
    # censoring#
    # ---------------------------------------------#
    C2 <- rbinom(n, 1, c_prob)#
#
    # ---------------------------------------------#
    # prep uptake at month 3#
    # ---------------------------------------------#
    Q2 <- plogis(-2 + trt_eff2 * A + w_eff*W + l1_eff*L1 + l2_eff*L2 + y1_eff*Y1)#
    Y2 <- rbinom(n, 1, Q2)#
#
    short_form <- data.frame(ID = 1:n, W = W, A = A, L1 = L1, C1 = C1, #
                             Y1 = Y1, L2 = L2, C2 = C2, Y2 = Y2)#
    if(return_short){#
        return(short_form)      #
    }else{#
        tmp <- reshape(short_form, varying = list(paste0("C",1:2),#
                                                  paste0("L",1:2),#
                                                  paste0("Y",1:2)),#
        times = c(1,2), idvar = "ID",#
        direction = "long")#
        colnames(tmp)[which(colnames(tmp)== "time")] <- "t"#
        # find id's of #
        tmp <-tmp[order(tmp$ID, tmp$t),]#
        # censored people at time 1#
        idx <- which(tmp$C1 == 1 & tmp$t == 1)#
        tmp$Y1[idx] <- NA#
        tmp <- tmp[-(idx + 1),]#
        return(tmp)#
    }#
}#
#
one_long_trial <- one_trial(n = 50, c_prob = 0.5, return_short = TRUE)
head(one_long_trial)
dat <- one_trial(n = 50, c_prob = 0.5, return_short = TRUE)
head(dat)
ltmle(data = dat, #
      Anodes = "A", Cnodes = c("C1","C2"), #
      Lnodes = c("W","L1","Y1","L2"), #
      Ynodes = "Y2")
fit <- ltmle(data = dat, #
      Anodes = "A", Cnodes = c("C1","C2"), #
      Lnodes = c("W","L1","Y1","L2"), #
      Ynodes = "Y2", abar = c(0,1))
fit <- ltmle(data = dat, #
      Anodes = "A", Cnodes = c("C1","C2"), #
      Lnodes = c("W","L1","Y1","L2"), #
      Ynodes = "Y2", abar = list(0,1))
fit <- ltmle(data = dat, #
      Anodes = "A", Cnodes = c("C1","C2"), #
      Lnodes = c("W","L1","Y1","L2"), #
      Ynodes = "Y2", abar = list(0,1), #
      survivalOutcome = FALSE)
fit <- ltmle(data = dat[,-1], #
      Anodes = "A", Cnodes = c("C1","C2"), #
      Lnodes = c("W","L1","Y1","L2"), #
      Ynodes = "Y2", abar = list(0,1), #
      survivalOutcome = FALSE)
fit
summary(fit)
names(fit)
fit$IC
names(summary(fit))
names(fit)
fit$msm
names(fit$msm)
fit$fit
?ltmle
table(dat$Y2)
table(dat$Y1)
dat <- one_trial(n = 500, c_prob = 0.5, return_short = TRUE)
fit6 <- ltmle(data = dat[,-1], #
      Anodes = "A", Cnodes = c("C1","C2"), #
      Lnodes = c("W","L1","Y1","L2"), #
      Ynodes = "Y2", abar = list(0,1), #
      survivalOutcome = FALSE)
fit$fit$Q
names(fit)
fit$formula
fit$transformOutcome
fit$beta
one_trial <- function(n = 240, c_prob = 0.05, #
                      trt_eff1 = 0.2, #
                      trt_eff2 = 0.2, #
                      w_eff = 0, #
                      b3 = -2, #
                      b6 = -2.5,#
                      y1_eff = log(1.5), #
                      l1_eff = 0, l2_eff = 0, #
                      set_trt = NULL, return_short = FALSE, ...){#
#
    # --------------------------------------------------#
    # baseline covariate#
    # --------------------------------------------------#
    W <- rbinom(n, 1, 0.25)#
#
    # -------------------------------------------#
    # baseline treatment assignment -- pool over P3 #
    # P3+ intervention so 2/3 prob of trt#
    # -------------------------------------------#
    if(is.null(set_trt)){#
        A <- rbinom(n, 1, 0.66)#
    }else{#
        A <- rep(set_trt, n) #
    }#
#
    # ---------------------------------------------#
    # app engagement between 0 and 3 months#
    # for simplicity, make binary#
    # ---------------------------------------------#
    L1 <- rbinom(n, 1, 0.75)#
#
    # ---------------------------------------------#
    # censoring#
    # ---------------------------------------------#
    C1 <- rbinom(n, 1, c_prob)#
#
    # ---------------------------------------------#
    # prep uptake at month 3#
    # ---------------------------------------------#
    Q1 <- plogis(b3 + trt_eff1 * A + w_eff*W + l1_eff*L1)#
    Y1 <- rbinom(n, 1, Q1)#
#
    # ---------------------------------------------#
    # app engagement between 0 and 3 months#
    # for simplicity, make binary#
    # ---------------------------------------------#
    L2 <- rbinom(n, 1, 0.75)#
#
    # ---------------------------------------------#
    # censoring#
    # ---------------------------------------------#
    C2 <- rbinom(n, 1, c_prob)#
#
    # ---------------------------------------------#
    # prep uptake at month 3#
    # ---------------------------------------------#
    Q2 <- plogis(b6 + trt_eff2 * A + w_eff*W + l1_eff*L1 + l2_eff*L2 + y1_eff*Y1)#
    Y2 <- rbinom(n, 1, Q2)#
#
    short_form <- data.frame(ID = 1:n, W = W, A = A, L1 = L1, C1 = C1, #
                             Y1 = Y1, L2 = L2, C2 = C2, Y2 = Y2)#
    if(return_short){#
        return(short_form)      #
    }else{#
        tmp <- reshape(short_form, varying = list(paste0("C",1:2),#
                                                  paste0("L",1:2),#
                                                  paste0("Y",1:2)),#
        times = c(1,2), idvar = "ID",#
        direction = "long")#
        colnames(tmp)[which(colnames(tmp)== "time")] <- "t"#
        # find id's of #
        tmp <-tmp[order(tmp$ID, tmp$t),]#
        # censored people at time 1#
        idx <- which(tmp$C1 == 1 & tmp$t == 1)#
        tmp$Y1[idx] <- NA#
        tmp <- tmp[-(idx + 1),]#
        return(tmp)#
    }#
}#
#
get_truth <- function(n = 1e6, trt_eff1, trt_eff2,#
                      y1_eff = log(1.5)){#
    sim_dat0 <- one_trial(n = n, set_trt = 0, trt_eff2 = trt_eff2,#
                         trt_eff1 = trt_eff1, y1_eff = y1_eff,#
                         return_short = TRUE)#
    sim_dat1 <- one_trial(n = n, set_trt = 1, trt_eff2 = trt_eff2,#
                         trt_eff1 = trt_eff1, y1_eff = y1_eff,#
                         return_short = TRUE)#
    return(list(t3 = mean(sim_dat1$Y1) - mean(sim_dat0$Y1), t6 = mean(sim_dat1$Y2) - mean(sim_dat0$Y2),#
                t30 = mean(sim_dat0$Y1), t31 = mean(sim_dat1$Y1),#
                t60 = mean(sim_dat0$Y2), t61 = mean(sim_dat1$Y2)))#
}
get_truth(trt_eff1 = 0.2, trt_eff2 = 0.2)
get_truth <- function(n = 1e6, trt_eff1, trt_eff2,#
                      y1_eff = log(1.5), b3 = -2, b6 = -2.5){#
    sim_dat0 <- one_trial(n = n, set_trt = 0, trt_eff2 = trt_eff2,#
                         trt_eff1 = trt_eff1, y1_eff = y1_eff, b3 = b3, b6 = b6, #
                         return_short = TRUE)#
    sim_dat1 <- one_trial(n = n, set_trt = 1, trt_eff2 = trt_eff2,#
                         trt_eff1 = trt_eff1, y1_eff = y1_eff,b3 = b3, b6 = b6, #
                         return_short = TRUE)#
    return(list(t3 = mean(sim_dat1$Y1) - mean(sim_dat0$Y1), t6 = mean(sim_dat1$Y2) - mean(sim_dat0$Y2),#
                t30 = mean(sim_dat0$Y1), t31 = mean(sim_dat1$Y1),#
                t60 = mean(sim_dat0$Y2), t61 = mean(sim_dat1$Y2)))#
}
get_truth(1e6, 0.2, 0.2, b3 = -1, b6 = 0.5)
get_truth(1e6, 0.2, 0.2, b3 = -1, b6 = -0.5)
get_truth(1e6, 0.2, 0.2, b3 = -1, b6 = -1.5)
setwd("~/Dropbox/R/cvtmleauc/sandbox/simulation/")#
  load("allOut_cvtn_realdata.RData")#
  load("allOut_cvauc_realdata.RData")#
  colnames(out_auc)[ncol(out_auc)-1] <- "est_lpo"#
    get_sim_rslt <- function(out, parm, wrapper, truth = "truth",#
                             estimators = c("dcvtmle1","donestep1",#
                                     "cvtmle1","onestep1","emp1"#
                                     ), ...){#
      b <- bp <- v <- m <- cv <- co <- mad <- NULL#
      for(i in seq_len(length(parm[,1]))){#
        x <- out[out$n == parm$n[i] & out$K == parm$K[i] & out$wrapper == wrapper,]#
        b <- rbind(b, colMeans(x[,paste0("est_",estimators)] - x[,truth], na.rm = TRUE))#
        bp <- rbind(bp, colMeans((x[,paste0("est_",estimators)] - x[,truth])/x[,truth], na.rm = TRUE))#
        v <- rbind(v, apply(x[,paste0("est_",estimators)], 2, var, na.rm = TRUE))#
        cv <- rbind(cv, apply(x[,paste0("est_",estimators)], 2, function(y){#
          sd(y, na.rm = TRUE) / mean(y, na.rm = TRUE)#
        }))#
        m <- rbind(m, colMeans((x[,paste0("est_",estimators)] - as.numeric(x[,truth]))^2, na.rm = TRUE))#
        mad <- rbind(mad, apply(x[,paste0("est_",estimators)], 2, function(y){ #
          median(y - as.numeric(x[,truth]), na.rm = TRUE)#
        }))#
        # coverage#
        # coverage <- rep(NA, length(estimators))#
        # ct <- 0#
        # for(est in estimators){#
        #   ct <- ct + 1#
        #   coverage[ct] <- mean(x[,paste0("est_",est)] - 1.96 * x[,paste0("se_",est)] < x[,truth] & #
        #                   x[,paste0("est_",est)] + 1.96 * x[,paste0("se_",est)] > x[,truth], na.rm = TRUE)#
        # }#
        # co <- rbind(co, coverage)#
      }#
      parm <- cbind(parm, b, v, m, mad, cv, bp) #, #
                    # co)#
      colnames(parm) <- c("n", "K", paste0("bias_", estimators),#
                          paste0("var_", estimators),#
                          paste0("mse_", estimators),#
                          paste0("mad_", estimators),#
                          paste0("cv_", estimators),#
                          paste0("bp_", estimators)#
                          ) #,#
                          # paste0("cov_", estimators))#
      return(parm)#
    }#
    parm <- expand.grid(n = c(50, 100, 250, 500),#
                        K = c(5, 10, 20, 40))#
    glm_rslt <- get_sim_rslt(out_tn, parm, wrapper = "glmnet_wrapper")#
    glm_rslt_auc <- get_sim_rslt(out_auc, parm, wrapper = "glmnet_wrapper",#
                                 estimators = c("dcvtmle1","donestep1",#
                                                             "desteq1","cvtmle1","onestep1",#
                                                             "esteq1",#
                                                             "emp1","lpo"))#
    randomforest_rslt <- get_sim_rslt(out_tn, parm, wrapper = "randomforest_wrapper")#
    randomforest_rslt_auc <- get_sim_rslt(out_auc, parm, wrapper = "randomforest_wrapper",#
                                          estimators = c("dcvtmle1","donestep1",#
                                                             "desteq1","cvtmle1","onestep1",#
                                                             "esteq1",#
                                                             "emp1","lpo"))#
    # box plots #
    make_one_box_plot_row <- function(rslt, metric = "bias", #
                                      est, add_legend = FALSE, #
                                      est_labels = c("CVEMP", "CVTMLE","CVOS","BOOT"),#
                                      rm_last = TRUE,#
                                      leg_x = "topright", leg_y = NULL, #
                                      grid = FALSE, scale = 1, #
                                      add_text = FALSE, #
                                      nx_grid = NULL, ny_grid = BULL, #
                                      pred_algo = "Logistic regression",#
                                            yaxis_label, add_ratio = TRUE, #
                                            xaxis_label = "Number CV Folds",#
                                            transpose = FALSE, #
                                            log = "y", print_n = FALSE,#
                                            relative_est = NULL,#
                                            relative_K = NULL, #
                                            absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
        par(las = 1)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,4] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0)#
        }#
        xl <- c(0, 12 + sum(sp))#
        if(transpose){#
          grbg <- t(grbg)#
        }#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        grbg <- grbg * scale#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40)#
        tmp <- barplot(grbg, legend.text = FALSE, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",3), col = col, #
          space = sp, xlim = xl, ... )#
#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",3), col = col, #
          space = sp, xlim = xl, ... )#
        }#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
        at = c(tmp[,1],tmp[,2],tmp[,3]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = 2.2*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(n == 50 & add_legend){#
          legend(x = leg_x, y= leg_y, xpd = TRUE, fill = unique(col), legend = leg.text, ncol = 3)#
        }#
        if(n == 50){#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4.5, pred_algo, cex = 1)#
        }else{#
          par(las = 0)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }#
        if(add_ratio){#
        }#
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }#
#
    library(RColorBrewer)#
    my_col <- brewer.pal(9,"Greys")[c(1,2,3,4,5,6)]
layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 7.1, 2.1, 2.1))#
    make_one_box_plot_row(rslt = glm_rslt, rm_last = FALSE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,    add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                    ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "LASSO", outer = TRUE, at = 0.75)#
    make_one_box_plot_row(rslt = randomforest_rslt, #
                          est = c("mse_emp1","mse_dcvtmle1",#
                                        "mse_donestep1"),#
                            relative_est = "mse_emp1",#
                            relative_K = 5,add_text = TRUE,rm_last = FALSE, #
                            grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "Random forest", outer = TRUE, at = 0.25)
layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 7.1, 2.1, 2.1))#
    make_one_box_plot_row(rslt = glm_rslt, rm_last = FALSE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,    add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                    ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "LASSO", outer = TRUE, at = 0.75)#
    make_one_box_plot_row(rslt = randomforest_rslt, #
                          est = c("mse_emp1","mse_dcvtmle1",#
                                        "mse_donestep1"),#
                            relative_est = "mse_emp1",#
                            relative_K = 5,add_text = TRUE,rm_last = FALSE, #
                            grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "Random forest", outer = TRUE, at = 0.25)
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/realdata_cvtn.pdf",#
        height = 6*2/3, width = 11)#
    layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 7.1, 2.1, 2.1))#
    make_one_box_plot_row(rslt = glm_rslt, rm_last = FALSE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,    add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                    ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "LASSO", outer = TRUE, at = 0.75)#
    make_one_box_plot_row(rslt = randomforest_rslt, #
                          est = c("mse_emp1","mse_dcvtmle1",#
                                        "mse_donestep1"),#
                            relative_est = "mse_emp1",#
                            relative_K = 5,add_text = TRUE,rm_last = FALSE, #
                            grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "Random forest", outer = TRUE, at = 0.25)#
    dev.off()
make_one_box_plot_row_auc <- function(rslt, metric = "bias", #
                                  est, add_legend = FALSE, #
                                  est_labels = c("CVEMP", "CVTMLE","CVOS"),#
                                  rm_last = TRUE,#
                                  grid = FALSE, #
                                  scale = 1, mult =1.15, #
                                  leg_y = NULL, #
                                  leg_x = "topleft",#
                                  add_text = FALSE, #
                                  nx_grid = NULL, ny_grid = BULL, #
                                  pred_algo = "Logistic regression",#
                                        yaxis_label, add_ratio = TRUE, #
                                        xaxis_label = "Number CV Folds",#
                                        transpose = FALSE, #
                                        log = "y", print_n = FALSE,#
                                        relative_est = NULL,#
                                        relative_K = NULL, #
                                        absolute_val = TRUE, col, ...){#
      for(n in c(50, 100, 250, 500)){#
          par(las = 0)#
        tmp <- rslt[rslt$n == n, ]#
        tmp5 <- tmp[tmp$K == 5,]#
        tmp10 <- tmp[tmp$K == 10,]#
        tmp20 <- tmp[tmp$K == 20,]#
        tmp40 <- tmp[tmp$K == 40,]#
        # est <- c("mse_dcvtmle1","mse_donestep1","mse_emp1","mse_bootstrap")#
        grbg <- as.matrix(rbind(tmp5[,est],tmp10[,est],tmp20[,est],tmp40[,est]))#
        if(absolute_val){#
          grbg <- abs(grbg)#
        }#
        if(rm_last){#
          grbg[2:4,5] <- NA#
          if(n==50){#
            grbg[3:4,1] <- NA#
          }else if(n == 100){#
            grbg[4,1] <- NA#
          }#
          # grbg[2:4,6] <- NA#
        }#
        row.names(grbg) <- c(5,10,20,40)#
#
        if(!is.null(relative_est)){#
          grbg <- grbg / grbg[paste(relative_K),relative_est]#
        }#
        if(n == 50){#
          leg.text <- est_labels#
          sp <- c(0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0)#
        }else{#
          leg.text <- FALSE#
          sp <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0)#
        }#
        txt <- c(5,10,20,40)#
        if(n == 50) txt <- c(5,10,"","",5,10,20,40,5,10,20,40,5,10,20,40)#
        if(n == 100) txt <- c(5,10,20,"",5,10,20,40,5,10,20,40,5,10,20,40)#
        grbg <- grbg * scale#
        xl <- c(0, 17 + sum(sp))#
        tmp <- barplot(grbg, legend.text = FALSE,#
                       beside=TRUE, log = "y", yaxt = "n", #
                       names.arg = rep("",dim(grbg)[2]), #
                       col = col, space = sp, xlim = xl, ... )#
        mtext(side = 1, outer = FALSE, line = 0.02, text = txt, cex =0.5, #
              at = c(tmp[,1],tmp[,2],tmp[,3],tmp[,4]))#
        mtext(side = 1, outer = FALSE, line = 0.02, text = "K = ", cex =0.5, #
              at = par()$usr[1])#
        if(grid){#
          grid(nx = nx_grid, ny = ny_grid, lty = 1, col = "gray75", equilogs = FALSE)#
          par(new = TRUE)#
          tmp <- barplot(grbg, legend.text = FALSE, space = sp, xlim = xl, #
          beside=TRUE, log = log, yaxt = "n", names.arg = rep("",dim(grbg)[2]), col = col, #
          ... )#
        }#
        if(add_text){#
          # grbg2 <- format(grbg, digits = 2, zero.print = TRUE, scientific = FALSE)#
          grbg2 <- formatC(grbg, digits = 2, format = "f")#
          grbg2[grbg > 10] <- ">10"#
          grbg2[grepl("N",grbg2)] <- ""          #
          text(x = tmp, y = mult*10^par()$usr[3], srt = 90, grbg2)#
               # adj = c(0,0.001),#
        }#
        if(add_legend){#
          if(n == 50){#
            legend(x = leg_x, y = leg_y, xpd = TRUE, fill = unique(col), legend = leg.text, ncol = 2)#
          }#
        }#
        if(n == 50){#
          par(las = 2)#
          axis(side = 2)#
          par(las = 0)#
          mtext(outer = FALSE, side = 2, line = 3, yaxis_label, cex = 0.75)#
          # mtext(outer = FALSE, side = 2, line = 4, "Logistic Regression", cex = 1)#
        }else{#
          par(las = 2)#
          axis(side = 2, labels = FALSE)#
        }#
        if(print_n){#
          par(las = 0)#
          mtext(outer = FALSE, side = 3, line = 1.5, paste0("n = ", n))#
        }        #
        if(!is.null(relative_est)){#
          abline(h = 1, lty = 3)#
        }#
      }#
    }
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/realdata_cvauc.pdf",#
        height = 6*2/3, width = 12)#
    layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 7.1, 2.1, 2.1))#
#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_desteq1", "mse_lpo"),#
                                relative_est = "mse_emp1", #
                                relative_K = 5,add_text = TRUE,mult = 1.4,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","CVEE","LPO"),#
                                    ylim = c(0.2,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(c(1:4,6),4))])#
    par(las = 0)#
    mtext(side = 2, line = 5, "LASSO", outer = TRUE, at = 0.75)#
#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc,  print_n = TRUE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                        "mse_donestep1","mse_desteq1","mse_lpo"),#
                                relative_est = "mse_emp1",rm_emp = TRUE, #
                                relative_K = 5,add_text = TRUE, mult = 1.45,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                      #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","CVEE","BOOT","LPO"),#
                                    ylim = c(0.2,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:6,4))])#
    par(las = 0)#
    mtext(side = 2, line = 5, "Random forest", outer = TRUE, at = 0.25)#
    dev.off()
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/realdata_cvtn.pdf",#
        height = 6*2/3, width = 11)#
    layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 7.1, 2.1, 2.1))#
    make_one_box_plot_row(rslt = glm_rslt, rm_last = FALSE, print_n = TRUE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,    add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                    ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "LASSO", outer = TRUE, at = 0.75)#
    make_one_box_plot_row(rslt = randomforest_rslt,  print_n = TRUE,#
                          est = c("mse_emp1","mse_dcvtmle1",#
                                        "mse_donestep1"),#
                            relative_est = "mse_emp1",#
                            relative_K = 5,add_text = TRUE,rm_last = FALSE, #
                            grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "Random forest", outer = TRUE, at = 0.25)#
    dev.off()
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/realdata_cvtn.pdf",#
        height = 6*2/3, width = 11)#
    layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 7.1, 2.1, 2.1))#
    make_one_box_plot_row(rslt = glm_rslt, rm_last = FALSE, print_n = TRUE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1"),#
                                relative_est = "mse_emp1",#
                                relative_K = 5,    add_text = TRUE,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                    ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "LASSO", outer = TRUE, at = 0.75)#
    make_one_box_plot_row(rslt = randomforest_rslt,  #
                          est = c("mse_emp1","mse_dcvtmle1",#
                                        "mse_donestep1"),#
                            relative_est = "mse_emp1",#
                            relative_K = 5,add_text = TRUE,rm_last = FALSE, #
                            grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                est_label = c("CVEMP", "CVTMLE","CVOS"),#
                                ylim = c(0.01,5), yaxis_label = "Relative MSE",#
                                col = my_col[sort(rep(c(1:3,5),4))])#
    mtext(side = 2, line = 5, "Random forest", outer = TRUE, at = 0.25)#
    dev.off()#
#
    # pdf("~/Dropb
pdf("~/Dropbox/Emory/cross-validated-prediction-metrics/realdata_cvauc.pdf",#
        height = 6*2/3, width = 12)#
    layout(matrix(1:8, nrow = 2, ncol = 4,  byrow = TRUE))#
    par(mar = c(1.6, 0.6, 1.6, 0.6), mgp = c(2.1, 0.5, 0),#
        oma = c(2.1, 7.1, 2.1, 2.1))#
#
    make_one_box_plot_row_auc(rslt = glm_rslt_auc, print_n = TRUE,#
                              est = c("mse_emp1","mse_dcvtmle1",#
                                            "mse_donestep1","mse_desteq1", "mse_lpo"),#
                                relative_est = "mse_emp1", #
                                relative_K = 5,add_text = TRUE,mult = 1.4,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                           #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","CVEE","LPO"),#
                                    ylim = c(0.2,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(c(1:4,6),4))])#
    par(las = 0)#
    mtext(side = 2, line = 5, "LASSO", outer = TRUE, at = 0.75)#
#
    make_one_box_plot_row_auc(rslt = randomforest_rslt_auc, #
                              est = c("mse_emp1","mse_dcvtmle1",#
                                        "mse_donestep1","mse_desteq1","mse_lpo"),#
                                relative_est = "mse_emp1",rm_emp = TRUE, #
                                relative_K = 5,add_text = TRUE, mult = 1.45,#
                                grid = TRUE, ny_grid = NULL, nx_grid = 0,                      #
                                    est_label = c("CVEMP", "CVTMLE","CVOS","CVEE","BOOT","LPO"),#
                                    ylim = c(0.2,5), yaxis_label = "Relative MSE",#
                                    col = my_col[sort(rep(1:6,4))])#
    par(las = 0)#
    mtext(side = 2, line = 5, "Random forest", outer = TRUE, at = 0.25)#
    dev.off()
out_tn_small <- out_tn[out_tn$K == 5,]
out_tn_small$my_int <- interaction(out_tn_small$n,out_tn_small$wrapper,out_tn_small$data)
head(out_tn)
summary(out_tn$truth)
summary(out_tn_small$truth)
out_tn_small$my_int <- interaction(out_tn_small$n,out_tn_small$wrapper,out_tn_small$data)
by(out_tn_small, my_int, function(x)summary(x$truth))
by(out_tn_small, out_tn_small$my_int, function(x)summary(x$truth))
a <- by(out_tn_small, out_tn_small$my_int, function(x)mean(x$truth))
a
which.max(a)
max(a)
a
which.max(a)
choose(40,39)
choose(40,2)
50 * 50
820/2500
SuperLearner::listWrappers()
library(SuperLearner)
SuperLearner::listWrappers()
cvma:::make_fit_task_list
install_github("benkeser/cvma")
devtools::install_github("benkeser/cvma")
cvma:::make_fit_task_list
learners <- c("SL.hal9002",#
              "SL.glm",#
              "SL.bayesglm", #
              "SL.earth",#
              "SL.step.interaction",#
              "SL.gam", #
              "SL.dbarts.mod",#
              "SL.gbm.caretMod",#
              "SL.rf.caretMod",#
              "SL.rpart.caretMod", #
              "SL.mean")#
#
V <- 10#
train_cols1 <- 1:V#
train_cols2 <- combn(V, V-1)#
train_cols2 <- combn(V, V-2)
train_cols2
train_cols1
train_cols2
learners <- c("SL.hal9002",#
              "SL.glm",#
              "SL.bayesglm", #
              "SL.earth",#
              "SL.step.interaction",#
              "SL.gam", #
              "SL.dbarts.mod",#
              "SL.gbm.caretMod",#
              "SL.rf.caretMod",#
              "SL.rpart.caretMod", #
              "SL.mean")#
#
V <- 10#
train_cols1 <- 1:V#
train_cols2 <- combn(V, V-1)#
train_cols2 <- combn(V, V-2)#
#
tasks <- c("fit_or","fit_ps")#
#
seeds <- 1:1#
#
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols1, cols(train_cols1)),#
                                 split(train_cols2), cols(train_cols2),#
                                 train_cols1),#
                  seed = seeds#
                 )
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols1, col(train_cols1)),#
                                 split(train_cols2), col(train_cols2),#
                                 train_cols1),#
                  seed = seeds#
                 )
train_cols1
train_cols2
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols2, col(train_cols2)),#
                                 split(train_cols3), col(train_cols3),#
                                 train_cols1),#
                  seed = seeds#
                 )
train_cols1 <- 1:V#
train_cols2 <- combn(V, V-1)#
train_cols3 <- combn(V, V-2)#
#
tasks <- c("fit_or","fit_ps")#
#
seeds <- 1:1#
#
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols2, col(train_cols2)),#
                                 split(train_cols3), col(train_cols3),#
                                 train_cols1),#
                  seed = seeds#
                 )
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols2, col(train_cols2)),#
                                 split(train_cols3, col(train_cols3)),#
                                 train_cols1),#
                  seed = seeds#
                 )
head(nuisance_parm)
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols2, col(train_cols2)),#
                                 split(train_cols3, col(train_cols3)),#
                                 train_cols1),#
                  seed = seeds, stringsAsFactors = FALSE#
                 )
head(nuisance_parm)
class(nuisance_parm$learner[1])
nuisance_parm$train_cols
nuisance_parm$train_cols[[1]]
nuisance_parm$train_cols[[2]]
head(nuisance_parm)
learners <- c("SL.hal9002",#
              "SL.glm",#
              "SL.bayesglm", #
              "SL.earth",#
              "SL.step.interaction",#
              "SL.gam", #
              "SL.dbarts.mod",#
              "SL.gbm.caretMod",#
              "SL.rf.caretMod",#
              "SL.rpart.caretMod", #
              "SL.mean")#
#
V <- 10#
train_cols1 <- 1:V#
train_cols2 <- combn(V, V-1)#
train_cols3 <- combn(V, V-2)#
#
tasks <- c("fit_or","fit_ps")#
#
seeds <- 1:1000#
#
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols2, col(train_cols2)),#
                                 split(train_cols3, col(train_cols3)),#
                                 train_cols1),#
                  seed = seeds, stringsAsFactors = FALSE#
                 )
nrow(nuisance_parm)
learners <- c("SL.hal9002",#
              "SL.glm",#
              "SL.bayesglm", #
              "SL.earth",#
              "SL.step.interaction",#
              "SL.dbarts.mod",#
              "SL.gbm.caretMod",#
              "SL.rf.caretMod",#
              "SL.rpart.caretMod", #
              "SL.mean")#
#
V <- 10#
train_cols1 <- 1:V#
train_cols2 <- combn(V, V-1)#
train_cols3 <- combn(V, V-2)#
#
tasks <- c("fit_or","fit_ps")#
#
seeds <- 1:1000#
#
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols2, col(train_cols2)),#
                                 split(train_cols3, col(train_cols3)),#
                                 train_cols1),#
                  seed = seeds, stringsAsFactors = FALSE#
                 )
nrow(nuisance_parm)
learners <- c("SL.hal9002",#
              "SL.glm",#
              "SL.earth",#
              "SL.step.interaction",#
              "SL.dbarts.mod",#
              "SL.gbm.caretMod",#
              "SL.rf.caretMod",#
              "SL.rpart.caretMod", #
              "SL.mean")#
#
V <- 10#
train_cols1 <- 1:V#
train_cols2 <- combn(V, V-1)#
train_cols3 <- combn(V, V-2)#
#
tasks <- c("fit_or","fit_ps")#
#
seeds <- 1:1000#
#
nuisance_parm <- expand.grid(#
                  learner = learners,#
                  train_cols = c(split(train_cols2, col(train_cols2)),#
                                 split(train_cols3, col(train_cols3)),#
                                 train_cols1),#
                  seed = seeds, stringsAsFactors = FALSE#
                 )
nrow(nuisance_parm)
makeData <- function(n, prob = 0.25, equal = TRUE){#
  adjustVars <- data.frame(w1 = rnorm(n), w2 = rbinom(n,1,0.5))#
  if (equal == T){#
    trt <- sample(c(0:3), n, replace = T)#
  }#
  else {trt <- rbinom(n, 3, prob)}#
  ftype <- rbinom(n, 1, 0.5) + 1 #
  ctime <- 1 + rgeom(n, plogis(-4)) # random censoring#
  ftime <- 1 + rgeom(n, plogis(-1 + 0.5*adjustVars$w1 - adjustVars$w2*trt))#
  time <- pmin(ctime, ftime)#
  ftype[ctime < ftime] <- 0#
  return(list(adjustVars = adjustVars, trt = trt, ftime = time, ftype = ftype))#
}
set.seed(1107)
dat <- makeData(1000)
ftime = dat$ftime; ftype = dat$ftype;
trt = dat$trt; adjustVars = dat$adjustVars;
SL.ftime = NULL#
SL.ctime = NULL#
SL.trt = NULL#
glm.trt = "1"#
t0 = 6#
glm.ftime = "w1 + trt*w2"#
glm.ctime = "t"#
glm.family = "binomial"#
msm.formula = "trt*ftime*ftype"#
msm.family = NULL #
msm.weights = "marginal"#
returnIC = TRUE#
returnModels = FALSE#
ftypeOfInterest = unique(ftype[ftype != 0])#
trtOfInterest = unique(trt)#
bounds = NULL#
verbose = FALSE#
Gcomp = FALSE#
gtol = 1e-3
n <- length(ftime)
id <- seq_len(n)
dat <- data.frame(id = id, ftime = ftime, ftype = ftype, trt = trt)
# determine if the treatment is in the msm formula
if(is.null(msm.formula)){#
  ind.ftype <- FALSE#
} else {#
  ind.ftype <- grepl("ftype", msm.formula) #
  ind.ftime <- grepl("ftime", msm.formula) #
}
if(ind.ftime) s.list <- rev(seq_len(t0)) else s.list <- t0
if(!is.null(adjustVars)) {#
  dat <- cbind(dat, adjustVars)#
}
# calculate number of failure types
nJ <- length(ftypeOfInterest)
allJ <- sort(unique(ftype[ftype != 0]))
nallJ <- length(unique(ftype[ftype != 0]))
ofInterestJ <- sort(ftypeOfInterest)
# calculate number of groups
ntrt <- length(trtOfInterest)
uniqtrt <- sort(trtOfInterest)
# estimate trt probabilities
trtOut <- estimateTreatment(dat = dat,#
                            ntrt = ntrt,#
                            uniqtrt = uniqtrt,#
                            adjustVars = adjustVars,#
                            SL.trt = SL.trt,#
                            glm.trt = glm.trt,#
                            returnModels = returnModels,#
                            gtol = gtol)
dat <- trtOut$dat
trtMod <- trtOut$trtMod
if(!is.null(msm.formula)){#
  # if msm, estimate stable weights#
  msmWeightList <- estimateMSMWeights(dat = dat, #
                                      ntrt = ntrt, #
                                      uniqtrt = uniqtrt, #
                                      adjustVars = adjustVars,#
                                      msm.formula = msm.formula,#
                                      msm.weights = msm.weights, #
                                      returnModels = returnModels)#
}else{#
  msmWeightList <- NULL#
}
# make long version of data sets needed for estimation of censoring
dataList <- makeDataList(dat = dat, J = allJ, ntrt = ntrt, uniqtrt = uniqtrt,#
                         t0 = t0, bounds = bounds)
# estimate censoring
censOut <- estimateCensoring(dataList = dataList,#
                             ntrt = ntrt,#
                             uniqtrt = uniqtrt,#
                             t0 = t0,#
                             verbose = verbose,#
                             adjustVars = adjustVars,#
                             SL.ctime = SL.ctime,#
                             glm.ctime = glm.ctime,#
                             glm.family = glm.family,#
                             returnModels = returnModels,#
                             gtol = gtol)
library(survtmle)
load("~/Dropbox/reproducible.RData")
ls()
